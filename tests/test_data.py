import numpy as np

from ct_plotting.data import Pod, Point, Plant
import pytest

grain_data = None
dims = None
pod = None


def setup_module(module):
    module.grain_data = np.array(
        [
            [
                4.81600000e-01,
                1.32230554e00,
                1.20479616e00,
                3.64212345e-01,
                1.00935932e00,
                4.36385300e-01,
                7.94433970e-02,
                3.07358037e00,
                0.00000000e00,
                1.62054478e02,
                3.61048507e02,
                1.52574627e01,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.30720000e00,
                1.90259316e00,
                1.11549836e00,
                6.87062282e-01,
                7.65582535e-01,
                1.48989757e00,
                2.93552273e-01,
                8.28036437e00,
                0.00000000e00,
                2.17175776e02,
                3.20451028e02,
                1.65248798e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.03200000e00,
                1.26462054e00,
                8.55682359e-01,
                8.16055067e-01,
                9.19376852e-01,
                6.76722876e-01,
                1.42822273e-01,
                4.63877120e00,
                0.00000000e00,
                2.25443215e02,
                3.05551492e02,
                2.30842637e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.16960000e00,
                1.08909190e00,
                7.16141516e-01,
                1.07392223e00,
                9.98203035e-01,
                8.03079217e-01,
                7.94433970e-02,
                4.60090368e00,
                0.00000000e00,
                2.26165045e02,
                3.15074209e02,
                2.38196269e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.51360000e00,
                1.86768546e00,
                1.67222963e00,
                8.10414831e-01,
                5.88994927e-01,
                2.18811406e00,
                3.48488531e-01,
                1.17326199e01,
                0.00000000e00,
                2.25548013e02,
                3.10981688e02,
                2.63815989e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.30720000e00,
                1.82025529e00,
                1.46079720e00,
                7.18141024e-01,
                9.56577861e-01,
                1.84356506e00,
                7.94433970e-02,
                8.24249685e00,
                0.00000000e00,
                2.29444798e02,
                3.08318495e02,
                2.99194135e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.44480000e00,
                1.65666879e00,
                1.51093672e00,
                8.72111558e-01,
                8.65680985e-01,
                1.99629992e00,
                2.83726418e-01,
                1.13350110e01,
                0.00000000e00,
                2.44760144e02,
                2.98006217e02,
                3.24042212e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.37600000e00,
                1.86968496e00,
                1.66717659e00,
                7.35952864e-01,
                8.09828577e-01,
                1.86961792e00,
                2.67515096e-01,
                1.06092169e01,
                0.00000000e00,
                2.38063077e02,
                3.01297439e02,
                3.51384039e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.30720000e00,
                1.96527300e00,
                1.38248744e00,
                6.65149319e-01,
                7.42622924e-01,
                1.44821301e00,
                4.18123934e-01,
                8.52650325e00,
                0.00000000e00,
                2.58754836e02,
                2.91119883e02,
                3.73589519e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.58240000e00,
                2.02794531e00,
                1.77237721e00,
                7.80297176e-01,
                4.32364543e-01,
                2.31251643e00,
                4.53442522e-01,
                1.19787588e01,
                0.00000000e00,
                2.52073088e02,
                2.96984228e02,
                4.05052669e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.65120000e00,
                2.02678481e00,
                1.69712667e00,
                8.14689349e-01,
                6.31872057e-01,
                2.21937748e00,
                4.82475166e-01,
                1.16884412e01,
                3.25660672e-04,
                2.52187702e02,
                2.91307896e02,
                4.41531846e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.78880000e00,
                1.94740813e00,
                1.73456876e00,
                9.18554243e-01,
                9.62459978e-01,
                2.90945244e00,
                7.94433970e-02,
                1.14107460e01,
                0.00000000e00,
                2.55942674e02,
                2.90525914e02,
                4.72785730e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.85760000e00,
                1.98671109e00,
                1.14188966e00,
                9.35012649e-01,
                8.01492060e-01,
                3.12308584e00,
                2.04612590e-01,
                1.54247031e01,
                0.00000000e00,
                2.70697393e02,
                2.85512930e02,
                5.14745777e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.72000000e00,
                2.14684108e00,
                2.04215912e00,
                8.01177142e-01,
                6.97455976e-01,
                3.17421457e00,
                4.48242844e-01,
                1.54436369e01,
                3.25660672e-04,
                2.61594190e02,
                2.89014064e02,
                5.44977107e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.37600000e00,
                2.11910078e00,
                1.83609605e00,
                6.49332026e-01,
                9.19018540e-01,
                2.64273635e00,
                1.55910715e-01,
                1.17831100e01,
                0.00000000e00,
                2.77212832e02,
                2.87108698e02,
                5.72645404e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                6.19200000e-01,
                1.46684220e00,
                1.15539776e00,
                4.22131297e-01,
                9.58600391e-01,
                5.91725441e-01,
                7.94433970e-02,
                5.98306816e00,
                0.00000000e00,
                2.82297193e02,
                2.86756742e02,
                6.01293341e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.03200000e00,
                1.80832340e00,
                1.28528371e00,
                5.70694379e-01,
                5.17489782e-01,
                1.16065464e00,
                4.14532774e-01,
                7.61137152e00,
                3.25660672e-04,
                2.81474319e02,
                2.85044625e02,
                6.11051361e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.92640000e00,
                2.12825431e00,
                1.68968088e00,
                9.05154985e-01,
                6.76493541e-01,
                3.11429301e00,
                3.97467540e-01,
                1.53994581e01,
                3.25660672e-04,
                2.63203870e02,
                2.93568305e02,
                6.34140272e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.78880000e00,
                1.74072654e00,
                1.65681375e00,
                1.02761689e00,
                9.86722195e-01,
                2.59779518e00,
                7.94433970e-02,
                9.64359509e00,
                0.00000000e00,
                2.65019935e02,
                2.94809178e02,
                7.07731444e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.51360000e00,
                1.70871130e00,
                1.17746618e00,
                8.85813773e-01,
                8.42511991e-01,
                1.66249773e00,
                2.19968806e-01,
                9.27754240e00,
                0.00000000e00,
                2.82666993e02,
                2.94632517e02,
                7.41592556e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.65120000e00,
                2.00719847e00,
                1.54087484e00,
                8.22639127e-01,
                9.19086999e-01,
                2.69647036e00,
                7.94433970e-02,
                1.03125879e01,
                0.00000000e00,
                2.65284575e02,
                2.98957000e02,
                7.68864356e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                2.06400000e00,
                1.93795127e00,
                1.89294962e00,
                1.06504226e00,
                7.82533187e-01,
                3.32499546e00,
                4.69422578e-01,
                1.34808371e01,
                0.00000000e00,
                2.71378257e02,
                3.02264643e02,
                8.25868168e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.78880000e00,
                1.97448590e00,
                1.82326140e00,
                9.05957345e-01,
                9.52457660e-01,
                3.33704491e00,
                1.07226677e-01,
                1.25593941e01,
                0.00000000e00,
                2.82044859e02,
                3.02546618e02,
                8.64349394e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                2.06400000e-01,
                1.70975512e00,
                1.55129458e00,
                1.20719042e-01,
                9.47861890e-01,
                2.36103987e-01,
                1.31490580e-01,
                3.40176555e00,
                0.00000000e00,
                2.81068966e02,
                3.05953103e02,
                9.24528276e02,
                1.00000000e00,
                1.00000000e00,
            ],
            [
                1.85760000e00,
                1.14378518e00,
                1.09326094e00,
                1.62408119e00,
                1.04384500e00,
                1.48468700e00,
                7.94433970e-02,
                9.29016491e00,
                0.00000000e00,
                2.82914016e02,
                3.02092564e02,
                9.50587629e02,
                1.00000000e00,
                1.00000000e00,
            ],
        ]
    )
    module.dims = np.array(
        [
            [0, 0, 0, 9837, 8972],
            [0, 0, 2, 9234, 8872],
            [0, 0, 4, 9234, 8872],
            [0, 0, 5, 9234, 8872],
            [0, 0, 6, 9234, 8872],
            [0, 0, 7, 9234, 8872],
            [0, 0, 8, 9234, 8872],
            [0, 0, 9, 9234, 8872],
            [0, 0, 10, 9234, 8872],
            [0, 0, 11, 9234, 8872],
            [0, 0, 12, 9234, 8872],
            [0, 0, 13, 9234, 8872],
            [0, 0, 14, 9234, 8872],
            [0, 0, 15, 9234, 8872],
            [0, 0, 16, 9234, 8872],
            [0, 0, 17, 9234, 8872],
            [0, 0, 2000, 10000, 9823],
        ]
    )
    module.pod = Pod(module.grain_data, module.dims, "TestPod")


def test_calculate_correct_volume():
    assert (
        pytest.approx(pod.mean_volume(), 1e-8)
        == np.mean(grain_data, axis=0)[3]
    )


def test_calculate_correct_surface_area():
    assert (
        pytest.approx(pod.mean_surface_area(), 1e-8)
        == np.mean(grain_data, axis=0)[5]
    )


def test_sphericities_returns_type_list():
    assert isinstance(pod.sphericities(), type([]))


def test_volumes_returned_in_insertion_order():
    assert list(pod.volumes()) == list(grain_data[:, 3])


def test_pod_can_load_grain_from_file(tmpdir):
    np.savetxt(
        tmpdir / "grain.csv",
        grain_data,
        delimiter=",",
        header="some, header, dont, worry, about, it",
    )
    np.savetxt(
        tmpdir / "dims.csv",
        dims,
        delimiter=",",
        header="some, additional, header, worry, even, less",
    )

    p_file = Pod.pod_from_files(
        tmpdir / "grain.csv", tmpdir / "dims.csv", "TestName"
    )

    p_direct = Pod(grain_data, dims, "TestName")
    assert p_direct == p_file


def test_pod_rejects_impossible_pod_geometry():
    with pytest.raises(ValueError):
        Pod(
            grain_data,
            [[0, 0, 1, 982374, 234897], [0, 0, 0, 3284, 9823]],
            "ImpossiblePod",
        )


def test_pod_filters_grains_too_large_for_pod():
    implausible_grains = np.append(
        grain_data,
        [
            [
                4.81600000e-01,
                1.32230554e00,
                1.20479616e00,
                4.36385300e80,
                3.64212345e-01,
                1.00935932e00,
                7.94433970e-02,
                3.07358037e00,
                0.00000000e00,
                dims[0][0],
                dims[0][1],
                dims[0][2],
                1.00000000e00,
                1.00000000e00,
            ],
            [
                4.81600000e-01,
                1.32230554e00,
                1.20479616e00,
                4.36385300e80,
                3.64212345e-01,
                1.00935932e00,
                7.94433970e-02,
                3.07358037e00,
                0.00000000e00,
                dims[-1][0],
                dims[-1][1],
                dims[-1][2],
                1.00000000e00,
                1.00000000e00,
            ],
        ],
        axis=0,
    )

    imp_pod = Pod(implausible_grains, dims, "Implausible")
    imp_pod.filter()
    assert imp_pod == pod


def test_point_addition_is_correct():
    p1 = Point(1, 2, 3)
    p2 = Point(1, 2, 3)
    p3 = p1 + p2
    assert p3.x == 2
    assert p3.y == 4
    assert p3.z == 6


def test_point_subtraction_is_correct():
    p1 = Point(1, 2, 3)
    p2 = Point(3, 2, 1)
    p3 = p1 - p2
    assert p3.x == -2
    assert p3.y == 0
    assert p3.z == 2


def test_point_magnitud_norm_is_correct_at_000():
    assert Point(0, 0, 0).norm() == 0


def test_point_magnitud_norm_is_correct_at_2_36():
    assert Point(2, -3, 6).norm() == 7


def test_plant_correctly_calculates_list_of_properties():
    pods = [Pod(grain_data, dims, "TestPod{}".format(i)) for i in range(0, 10)]

    plant = Plant(pods, "TestPlant")
    assert True
    assert plant.mean_sphericity() == pod.mean_sphericity()
    assert plant.mean_volume() == pod.mean_volume()
    assert plant.mean_surface_area() == pod.mean_surface_area()


def test_group_from_pods_correctly_groups_by_similar_name():
    group1 = []
    group2 = []
    group3 = []
    for i in range(0, 10):
        group1.append(Pod(grain_data, dims, "Group1Pod_{}".format(i)))
        group2.append(Pod(grain_data, dims, "Group2Pod_{}".format(i)))
        group3.append(Pod(grain_data, dims, "Group3Pod_{}".format(i)))

    plants = Plant.group_from_pods(
        group1 + group2 + group3, lambda name: name[:-3]
    )

    for plant in plants:
        assert len(plant.pods) == 10
